package com.sitemap.qingzangtrain.activity;

import android.app.AlertDialog;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.view.LayoutInflater;
import android.view.View;
import android.view.Window;
import android.widget.Button;
import android.widget.GridView;
import android.widget.LinearLayout;
import android.widget.TextView;

import com.alibaba.fastjson.JSONObject;
import com.sitemap.qingzangtrain.R;
import com.sitemap.qingzangtrain.adapter.TypeGridAdapter;
import com.sitemap.qingzangtrain.application.MyApplication;
import com.sitemap.qingzangtrain.config.RequestCode;
import com.sitemap.qingzangtrain.config.WebUrlConfig;
import com.sitemap.qingzangtrain.http.HttpUtil;
import com.sitemap.qingzangtrain.model.TypeModel;
import com.sitemap.qingzangtrain.util.DateUtil;
import com.sitemap.qingzangtrain.util.ToastUtil;
import com.sitemap.qingzangtrain.view.NumericWheelAdapter;
import com.sitemap.qingzangtrain.view.OnWheelChangedListener;
import com.sitemap.qingzangtrain.view.RoundProgressDialog;
import com.sitemap.qingzangtrain.view.WheelTimeView;
import com.sitemap.qingzangtrain.view.WheelView;

import org.xutils.view.annotation.ContentView;
import org.xutils.view.annotation.ViewInject;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.List;


/**
 * 数据查询 页面
 */
@ContentView(R.layout.activity_data_check)
public class DataCheckActivity extends BaseActivity implements View.OnClickListener,TypeGridAdapter.OnCallBackSelect{
    private DataCheckActivity mContext;//本类
    @ViewInject(R.id.back)
    private LinearLayout mBack;//返回上一层
    @ViewInject(R.id.title)
    private TextView mTitle;//标题
    @ViewInject(R.id.type_grid)
    private GridView type_grid;//类型选择
    private TypeGridAdapter typeGridAdapter;//类型适配器
    private TypeGridAdapter dengjiGridAdapter;//等级适配器
    private List<TypeModel> typeList=new ArrayList<TypeModel>();//类型
    private List<TypeModel> dengjiList=new ArrayList<TypeModel>();//等级
    @ViewInject(R.id.checi)
    private TextView checi;//车次按钮
    private int trainSelect = 0;//车次选择的位置
    private int nowSelect=0;//现在选中的位置
    private String strTrians,strSTime,strETime;//车次,开始时间，结束时间
    @ViewInject(R.id.dengji_grid)
    private GridView dengji_grid;//等级选择
    @ViewInject(R.id.check_s_time)
    private TextView sTime;//开始时间
    @ViewInject(R.id.check_e_time)
    private TextView eTime;//结束时间
    private Dialog dialog;//dialog
    private static int START_YEAR = 1999, END_YEAR = 2050;//起始年份，结束年份
    private  String[] ltrain = null;//所有的车次
    private  String[] ltrainId = null;//所有的车次id
    @ViewInject(R.id.check)
    private TextView mCheck;//查询
    private int troubleType = 0;//选择故障类型
    private int troubleLevel = 0;//选择故障的等级
    private String troubleId = "";//车次id
    private String troubleStatus = "";//列车状态 (查询所有，传””，1故障)
    private RoundProgressDialog progressDialog;//加载条
    private HttpUtil http;//网络请求

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        init();
    }

    private void init(){
        mContext=this;
        mBack.setOnClickListener(this);
        mTitle.setText("数据查询");
        checi.setOnClickListener(this);
        sTime.setOnClickListener(this);
        eTime.setOnClickListener(this);
        mCheck.setOnClickListener(this);

        initTroubleType(1);
        initTroubleLevel(2);

        strSTime = DateUtil.getCurrentAgeTimes(1).replace(".","-");
        strETime = DateUtil.getNYRSFDates().replace(".","-");
        sTime.setText(strSTime);
        eTime.setText(strETime);

        ltrain = getIntent().getStringArrayExtra("trainsNum");
        ltrainId = getIntent().getStringArrayExtra("trainsId");
        checi.setText(ltrain[trainSelect]);
        troubleId = ltrainId[trainSelect];
    }

    /**
     * 初始化故障等级 数据
     */
    private void initTroubleLevel(int type) {
        dengjiList = getTroubleLevel();
        dengjiGridAdapter=new TypeGridAdapter(mContext,dengjiList,type,this);
        dengji_grid.setAdapter(dengjiGridAdapter);
    }

    /**
     * 初始化故障类别数据
     */
    private void initTroubleType(int type) {
        typeList = getTroubleType();
        typeGridAdapter=new TypeGridAdapter(mContext,typeList,type,this);
        type_grid.setAdapter(typeGridAdapter);
    }

    @Override
    public void onClick(View v) {
        if (v==checi){
            View outerView = LayoutInflater.from(this).inflate(R.layout.wheel_view, null);
            WheelView wv = (WheelView) outerView.findViewById(R.id.wheel_view_wv);
            wv.setOffset(2);
            wv.setItems(Arrays.asList(ltrain));
            wv.setSeletion(trainSelect);
            wv.setOnWheelViewListener(new WheelView.OnWheelViewListener() {
                @Override
                public void onSelected(int selectedIndex, String item) {
                    trainSelect = selectedIndex - 2;
                }
            });

            new AlertDialog.Builder(this)
                    .setTitle("选择车次")
                    .setView(outerView)
                    .setPositiveButton("确定", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface dialog, int which) {
                            checi.setText(ltrain[trainSelect]);
                            troubleId = ltrainId[trainSelect];
                            dialog.dismiss();
                        }
                    })
                    .setNegativeButton("取消",null)
                    .show();
        }
        if (v==sTime){
            showDateTimePicker(1);
        }
        if (v==eTime){
            showDateTimePicker(2);
        }
        if (v==mBack){
            this.finish();
        }
        if (v == mCheck){

            if (DateUtil.getTwoTimeInterval(strETime,strSTime)<0){
                ToastUtil.showBottomShort(mContext,"终止时间不能小于起始时间");
                return;
            }
            if (DateUtil.getTwoTimeInterval(strETime,strSTime)>15*24*60*60){
                ToastUtil.showBottomShort(mContext,"时间差最大为15天");
                return;
            }
            if (troubleLevel == 0){
                troubleStatus = "";
            }else{
                troubleStatus = "1";
            }
            Intent intent = new Intent();
            intent.setClass(mContext,DataPowerSupplyActivity.class);
            intent.putExtra("trainID",troubleId);
            intent.putExtra("trainStatus",troubleStatus);
            intent.putExtra("startTime",strSTime);
            intent.putExtra("endTime",strETime);
            //0 轴温 1供电 2制动 3防滑剂 4://车门 5://烟火 6://制氧机 7://空调 8 车下电源
            intent.putExtra("troubleType",troubleType);
            startActivity(intent);
        }
    }

    /**
     * @Description: TODO 弹出日期时间选择器
     * @param typeBt 类型
     */
    private void showDateTimePicker(final int typeBt) {
        Calendar calendar = Calendar.getInstance();
        int year = calendar.get(Calendar.YEAR);
        int month = calendar.get(Calendar.MONTH);
        int day = calendar.get(Calendar.DATE);
        int hour = calendar.get(Calendar.HOUR_OF_DAY);
        int minute = calendar.get(Calendar.MINUTE);

        // 添加大小月月份并将其转换为list,方便之后的判断
        String[] months_big = { "1", "3", "5", "7", "8", "10", "12" };
        String[] months_little = { "4", "6", "9", "11" };

        final List<String> list_big = Arrays.asList(months_big);
        final List<String> list_little = Arrays.asList(months_little);

        dialog = new Dialog(this,R.style.TimeDateStyle);
//        dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
        // 找到dialog的布局文件
        View view = getLayoutInflater().inflate(R.layout.time_layout, null);

        // 年
        final WheelTimeView wv_year = (WheelTimeView) view.findViewById(R.id.year);
        wv_year.setAdapter(new NumericWheelAdapter(START_YEAR, END_YEAR));// 设置"年"的显示数据
        wv_year.setCyclic(true);// 可循环滚动
        wv_year.setLabel("年");// 添加文字
        wv_year.setCurrentItem(year - START_YEAR);// 初始化时显示的数据

        // 月
        final WheelTimeView wv_month = (WheelTimeView) view.findViewById(R.id.month);
        wv_month.setAdapter(new NumericWheelAdapter(1, 12));
        wv_month.setCyclic(true);
        wv_month.setLabel("月");
        wv_month.setCurrentItem(month);

        // 日
        final WheelTimeView wv_day = (WheelTimeView) view.findViewById(R.id.day);
        wv_day.setCyclic(true);
        // 判断大小月及是否闰年,用来确定"日"的数据
        if (list_big.contains(String.valueOf(month + 1))) {
            wv_day.setAdapter(new NumericWheelAdapter(1, 31));
        } else if (list_little.contains(String.valueOf(month + 1))) {
            wv_day.setAdapter(new NumericWheelAdapter(1, 30));
        } else {
            // 闰年
            if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0)
                wv_day.setAdapter(new NumericWheelAdapter(1, 29));
            else
                wv_day.setAdapter(new NumericWheelAdapter(1, 28));
        }
        wv_day.setLabel("日");
        wv_day.setCurrentItem(day - 1);

        // 时
        final WheelTimeView wv_hours = (WheelTimeView) view.findViewById(R.id.hour);
        wv_hours.setAdapter(new NumericWheelAdapter(0, 23));
        wv_hours.setCyclic(true);
        wv_hours.setLabel("时");
        wv_hours.setCurrentItem(hour);

        // 分
        final WheelTimeView wv_mins = (WheelTimeView) view.findViewById(R.id.mins);
        wv_mins.setAdapter(new NumericWheelAdapter(0, 59, "%02d"));
        wv_mins.setCyclic(true);
        wv_mins.setLabel("分");
        wv_mins.setCurrentItem(minute);

        // 添加"年"监听
        OnWheelChangedListener wheelListener_year = new OnWheelChangedListener() {
            public void onChanged(WheelTimeView wheel, int oldValue, int newValue) {
                int year_num = newValue + START_YEAR;
                // 判断大小月及是否闰年,用来确定"日"的数据
                if (list_big.contains(String
                        .valueOf(wv_month.getCurrentItem() + 1))) {
                    wv_day.setAdapter(new NumericWheelAdapter(1, 31));
                } else if (list_little.contains(String.valueOf(wv_month
                        .getCurrentItem() + 1))) {
                    wv_day.setAdapter(new NumericWheelAdapter(1, 30));
                } else {
                    if ((year_num % 4 == 0 && year_num % 100 != 0)
                            || year_num % 400 == 0)
                        wv_day.setAdapter(new NumericWheelAdapter(1, 29));
                    else
                        wv_day.setAdapter(new NumericWheelAdapter(1, 28));
                }
                wv_month.setCurrentItem(0);
                wv_day.setCurrentItem(0);
            }
        };
        // 添加"月"监听
        OnWheelChangedListener wheelListener_month = new OnWheelChangedListener() {
            public void onChanged(WheelTimeView wheel, int oldValue, int newValue) {
                int month_num = newValue + 1;
                // 判断大小月及是否闰年,用来确定"日"的数据
                if (list_big.contains(String.valueOf(month_num))) {
                    wv_day.setAdapter(new NumericWheelAdapter(1, 31));
                } else if (list_little.contains(String.valueOf(month_num))) {
                    wv_day.setAdapter(new NumericWheelAdapter(1, 30));
                } else {
                    if (((wv_year.getCurrentItem() + START_YEAR) % 4 == 0 && (wv_year
                            .getCurrentItem() + START_YEAR) % 100 != 0)
                            || (wv_year.getCurrentItem() + START_YEAR) % 400 == 0)
                        wv_day.setAdapter(new NumericWheelAdapter(1, 29));
                    else
                        wv_day.setAdapter(new NumericWheelAdapter(1, 28));
                }
                wv_day.setCurrentItem(0);
            }
        };
        wv_year.addChangingListener(wheelListener_year);
        wv_month.addChangingListener(wheelListener_month);

        // 根据屏幕密度来指定选择器字体的大小
        int textSize = 0;

        textSize = 30;

        wv_day.TEXT_SIZE = textSize;
        wv_hours.TEXT_SIZE = textSize;
        wv_mins.TEXT_SIZE = textSize;
        wv_month.TEXT_SIZE = textSize;
        wv_year.TEXT_SIZE = textSize;

        TextView btn_sure = (TextView) view.findViewById(R.id.btn_datetime_sure);
        TextView btn_cancel = (TextView) view.findViewById(R.id.btn_datetime_cancel);
        // 确定
        btn_sure.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View arg0) {
                // 如果是个数,则显示为"02"的样式
                String parten = "00";
                DecimalFormat decimal = new DecimalFormat(parten);
                // 设置日期的显示
                // tv_time.setText((wv_year.getCurrentItem() + START_YEAR) + "-"
                // + decimal.format((wv_month.getCurrentItem() + 1)) + "-"
                // + decimal.format((wv_day.getCurrentItem() + 1)) + " "
                // + decimal.format(wv_hours.getCurrentItem()) + ":"
                // + decimal.format(wv_mins.getCurrentItem()));
                if (typeBt==1){
                    strSTime = (wv_year.getCurrentItem() + START_YEAR) + "-"
                            + decimal.format((wv_month.getCurrentItem() + 1)) + "-"
                            + decimal.format((wv_day.getCurrentItem() + 1)) + " "
                            + decimal.format(wv_hours.getCurrentItem()) + ":"
                            + decimal.format(wv_mins.getCurrentItem());
                    sTime.setText(strSTime);
                }else {
                    strETime = (wv_year.getCurrentItem() + START_YEAR) + "-"
                            + decimal.format((wv_month.getCurrentItem() + 1)) + "-"
                            + decimal.format((wv_day.getCurrentItem() + 1)) + " "
                            + decimal.format(wv_hours.getCurrentItem()) + ":"
                            + decimal.format(wv_mins.getCurrentItem());
                    eTime.setText(strETime);
                }

                dialog.dismiss();
            }
        });
        // 取消
        btn_cancel.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View arg0) {
                dialog.dismiss();
            }
        });
        // 设置dialog的布局,并显示
        dialog.setContentView(view);
        dialog.show();
    }

    /**
     * 获取故障类型
     */
    private List<TypeModel> getTroubleType(){
        List<TypeModel> list = new ArrayList<>();
        String[] name = {"轴温","供电","制动","防滑器","车门","烟火","制氧机","空调","车下电源"};
        for (int i=0;i<name.length;i++){
            TypeModel model = new TypeModel();
            model.setTypeName(name[i]);
            if (i==0){
                model.setIsSelect(1);
            }else{
                model.setIsSelect(0);
            }
            list.add(model);
        }
        return list;
    }

    /**
     * 获取故障等级
     */
    private List<TypeModel> getTroubleLevel(){
        List<TypeModel> list = new ArrayList<>();
        String[] name = {"正常","故障"};
        for (int i=0;i<name.length;i++){
            TypeModel model = new TypeModel();
            model.setTypeName(name[i]);
            if (i==0){
                model.setIsSelect(1);
            }else{
                model.setIsSelect(0);
            }
            list.add(model);
        }
        return list;
    }

    /**
     * 当前选择的位置
     * @param pos
     * @param type 1 故障类型  2 等级
     */
    @Override
    public void onSelected(int pos,int type) {
        if (type ==1){//故障类型
            troubleType = pos;
            for (int i = 0; i <typeList.size() ; i++) {
                typeList.get(i).setIsSelect(0);
            }
            typeList.get(pos).setIsSelect(1);
            typeGridAdapter.notifyDataSetChanged();
        }else{
            troubleLevel = pos;
            for (int i = 0; i <dengjiList.size() ; i++) {
                dengjiList.get(i).setIsSelect(0);
            }
            dengjiList.get(pos).setIsSelect(1);
            dengjiGridAdapter.notifyDataSetChanged();
        }
    }
}
