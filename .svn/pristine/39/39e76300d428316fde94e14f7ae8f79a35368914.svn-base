package com.sitemap.qingzangtrain.activity;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.view.GravityCompat;
import android.support.v4.widget.DrawerLayout;
import android.util.Log;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.View;
import android.widget.AdapterView;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.ZoomControls;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.baidu.mapapi.map.BaiduMap;
import com.baidu.mapapi.map.BitmapDescriptor;
import com.baidu.mapapi.map.BitmapDescriptorFactory;
import com.baidu.mapapi.map.InfoWindow;
import com.baidu.mapapi.map.MapStatus;
import com.baidu.mapapi.map.MapStatusUpdate;
import com.baidu.mapapi.map.MapStatusUpdateFactory;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.Marker;
import com.baidu.mapapi.map.MarkerOptions;
import com.baidu.mapapi.map.OverlayOptions;
import com.baidu.mapapi.model.LatLng;
import com.sitemap.qingzangtrain.R;
import com.sitemap.qingzangtrain.adapter.MainDrawerLeftAdapter;
import com.sitemap.qingzangtrain.adapter.MainDrawerRightAdapter;
import com.sitemap.qingzangtrain.application.MyApplication;
import com.sitemap.qingzangtrain.config.RequestCode;
import com.sitemap.qingzangtrain.config.WebUrlConfig;
import com.sitemap.qingzangtrain.http.HttpImageUtil;
import com.sitemap.qingzangtrain.http.HttpUtil;
import com.sitemap.qingzangtrain.model.StatisticsInfoModel;
import com.sitemap.qingzangtrain.model.TrainModel;
import com.sitemap.qingzangtrain.model.TroublesModel;
import com.sitemap.qingzangtrain.model.WarmNumsModel;
import com.sitemap.qingzangtrain.util.AnimaUtil;
import com.sitemap.qingzangtrain.util.ParserUtil;
import com.sitemap.qingzangtrain.util.ToastUtil;
import com.sitemap.qingzangtrain.view.RoundProgressDialog;

import org.xutils.view.annotation.ContentView;
import org.xutils.view.annotation.ViewInject;

import java.util.ArrayList;
import java.util.List;

/**
 * 主页面
 * Created by Administrator on 2017/1/13.
 */

@ContentView(R.layout.activity_main)
public class MainActivity extends BaseActivity implements View.OnClickListener{
    private MainActivity mContext;//本类
    @ViewInject(R.id.mDrawerLayout)
    private DrawerLayout mDrawerLayout;// 抽屉布局
    @ViewInject(R.id.train_menu)
    private LinearLayout train_menu;//左边菜单
    @ViewInject(R.id.train_tongji)
    private LinearLayout train_tongji;//右边菜单
    @ViewInject(R.id.main_gaojing)
    private ImageView main_gaojing;//头部中间告警图标
    private RoundProgressDialog progressDialog;//加载条
    private HttpUtil http;//网络请求
    private List<TroublesModel> ltroubles=new ArrayList<TroublesModel>();//故障列表
    @ViewInject(R.id.bmapView)
    private MapView mMapView;
    private BaiduMap mBaiduMap;//百度地图对象
    private BaiduMap.OnMarkerClickListener markClick;// 地图标注点击事件
    private List<LatLng> points=new ArrayList<LatLng>();//线的点的集合
    private LatLng nowPosition;//最新位置
    private List<TrainModel> ltrain=new ArrayList<TrainModel>();//火车列表
    private boolean isGifImg = false;//是否 为gif图片
//    @ViewInject(R.id.main_gridView)
//    private GridView mRightGv;//右侧布局
    @ViewInject(R.id.main_listView)
    private ListView mLeftLv;//左侧布局
    private String troubleLevel = "1;2";//首页查询等级 值
    private long exitTime = 0;//退出的时间
    private MessageReceiver jPushReceiver;//接收极光广播
    public static final String MESSAGE_RECEIVED_ACTION = "com.sitemap.train.MESSAGE_RECEIVED_ACTION";
    private boolean isWay = false;//推送获取数据
    @ViewInject(R.id.menu_bottom)
    private LinearLayout mMenuBottom;//底部布局
    private StatisticsInfoModel statisticsInfoModel = null;//统计数据
    @ViewInject(R.id.menu_txt)
    private TextView mBottomTitle;//底部内容
    @ViewInject(R.id.msg_size)
    private TextView mMsgNum;//未读消息数量
    private WarmNumsModel warmModel;//获取单车故障统计数据（首页底部）  实体类
    private boolean isReadMsg = false;//是否有告警数据


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mContext = this;
        init();
    }

    @Override
    public void onResume() {
        super.onResume();
        if (http == null){
            http = new HttpUtil(handler);
        }
        mMenuBottom.setVisibility(View.VISIBLE);
       getNetData();
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        unregisterReceiver(jPushReceiver);
    }

    private Handler handler = new Handler(){
        @Override
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            if (progressDialog != null && progressDialog.isShowing()) {
                progressDialog.dismiss();// 关闭进度条
            }
            switch (msg.what){
                case HttpUtil.SUCCESS:
                    //获取故障（告警）列表
                    if (msg.arg1 == RequestCode.GETTROUBLES){
                        if (msg.obj.toString()!=null&&!msg.obj.toString().equals("")){
                            ltroubles.clear();
                            ltroubles=ParserUtil.jsonToList(msg.obj.toString(),TroublesModel.class);
                            if (ltroubles.size()>0){
//                                HttpImageUtil.loadImageGif(main_gaojing,"assets://bjd.gif");
//                                isGifImg = true;
                            }
                        }
                    }
                    if (msg.arg1 == RequestCode.GETTRAININFO){
                        if (msg.obj.toString()!=null&&!msg.obj.toString().equals("")&&!msg.obj.toString().equals("null")){
                            ltrain.clear();
                            ltrain=ParserUtil.jsonToList(msg.obj.toString(),TrainModel.class);
                            Log.i("TAG","ltrain.size()"+ltrain.size());
                            if (ltrain.size()>0){
                                mBaiduMap.clear();
                                points.clear();

                                for ( int i = 0; i < ltrain.size(); i++) {
                                    if (ltrain.get(i).getLat().equals("0") || ltrain.get(i).getLng().equals("0")||Double.parseDouble(ltrain.get(i).getLat())<0||Double.parseDouble(ltrain.get(i).getLng())<0) {
                                        return;
                                    }
                                    points.add(new LatLng(Double.parseDouble(ltrain.get(i).getLat()), Double.parseDouble(ltrain.get(i).getLng())));
//                                    setPoint((new LatLng(Double.parseDouble(ltrain.get(i).getLat()), Double.parseDouble(ltrain.get(i).getLng()))),"当前时间："+ltrain.get(i).getTime() , "车次："+ltrain.get(i).getTrainNumber()+"    速度："+ltrain.get(i).getSpeed()+"km/h",1,ltrain.get(i).getImg(),i);
//                                       mBaiduMap.removeMarkerClickListener(markClick);
                                        Marker marker = null;
                                        // 构建用户绘制点Option对象
                                        // OverlayOptions polygonOption = new DotOptions()
                                        // .color(Integer.valueOf(Color.RED))
                                        // .radius(14).center(points.get(i)).zIndex(i);
                                        // 构建Marker图标
//                                        BitmapDescriptor bitmap = BitmapDescriptorFactory
//                                                .fromResource(R.drawable.tingche);
                                        // 构建Marker图标
                                        BitmapDescriptor bitmap = BitmapDescriptorFactory.fromAssetWithDpi(ltrain.get(i).getImg());
                                    Log.i("TAG","points:"+points.size());
                                        // 构建MarkerOption，用于在地图上添加Marker
                                        OverlayOptions option = new MarkerOptions()
                                                .position(points.get(i)).icon(bitmap)
                                                .zIndex(2);
                                        marker = (Marker) mBaiduMap.addOverlay(option);
                                        Bundle bundle = new Bundle();
                                        bundle.putSerializable("info", String.valueOf(i));
                                        marker.setExtraInfo(bundle);
                                        markClick = new BaiduMap.OnMarkerClickListener() {
                                            @Override
                                            public boolean onMarkerClick(Marker arg0) {
                                                if (arg0.getZIndex() == 3) {
                                                    return false;
                                                }
                                                View contentView = getLayoutInflater().inflate(R.layout.mapmark_layout,
                                                        null);
                                                TextView location_address = (TextView) contentView
                                                        .findViewById(R.id.location_address);
                                                TextView location_time = (TextView) contentView
                                                        .findViewById(R.id.location_time);
                                                TextView xingbie = (TextView) contentView
                                                        .findViewById(R.id.xingbie);
                                                TextView speed = (TextView) contentView
                                                        .findViewById(R.id.speed);
                                                TextView haiba = (TextView) contentView
                                                        .findViewById(R.id.haiba);
                                                TextView statu = (TextView) contentView
                                                        .findViewById(R.id.statu);
                                                location_address.setText("车        次："+ltrain.get(Integer.parseInt((String) arg0
                                                        .getExtraInfo().get("info"))).getTrainNumber());
                                                location_address.setGravity(Gravity.CENTER_VERTICAL);
                                                location_time.setText("上报时间："+ltrain.get(Integer.parseInt((String) arg0
                                                        .getExtraInfo().get("info"))).getTime());
                                                location_time.setGravity(Gravity.CENTER_VERTICAL);
                                                if (ltrain.get(Integer.parseInt((String) arg0
                                                        .getExtraInfo().get("info"))).getSx().equals("s")){
                                                    xingbie.setText("行        别：上行");
                                                }else if (ltrain.get(Integer.parseInt((String) arg0
                                                        .getExtraInfo().get("info"))).getSx().equals("x")){
                                                    xingbie.setText("行        别：下行");
                                                }else {
                                                    xingbie.setText("行        别：");
                                                }
                                                xingbie.setGravity(Gravity.CENTER_VERTICAL);
                                                speed.setText("速        度："+ltrain.get(
                                                        Integer.parseInt((String) arg0.getExtraInfo().get("info"))).getSpeed()+"km/h");
                                                speed.setGravity(Gravity.CENTER_VERTICAL);
                                                haiba.setText("海        拔："+ltrain.get(Integer.parseInt((String) arg0
                                                        .getExtraInfo().get("info"))).getAltitude()+"m");
                                                haiba.setGravity(Gravity.CENTER_VERTICAL);
                                                switch (Integer.parseInt(ltrain.get(Integer.parseInt((String) arg0
                                                        .getExtraInfo().get("info"))).getStatus())){
                                                    case 0:
                                                        statu.setText("运行状态：正常");
                                                        break;
                                                    case 1:
                                                        statu.setText("运行状态：告警");
                                                        break;
                                                    case 2:
                                                        statu.setText("运行状态：故障");
                                                        break;
                                                    case 3:
                                                        statu.setText("运行状态：离线");
                                                        break;
                                                }

                                                statu.setGravity(Gravity.CENTER_VERTICAL);
                                                contentView
                                                        .setOnClickListener(new View.OnClickListener() {

                                                            @Override
                                                            public void onClick(View v) {
                                                                mBaiduMap.hideInfoWindow();
                                                            }
                                                        });
                                                // 构建对话框用于显示
                                                // 创建InfoWindow , 传入 view， 地理坐标， y 轴偏移量
                                                InfoWindow mInfoWindow = new InfoWindow(
                                                        contentView, points.get(Integer
                                                        .parseInt((String) arg0
                                                                .getExtraInfo().get(
                                                                        "info"))), -20);
//                                               Log.i("TAG","zuobiao:"+)
                                                // 显示InfoWindow
                                                mBaiduMap.showInfoWindow(mInfoWindow);
                                                return false;
                                            }
                                        };
//						               addArrow(points,20,60);
                                        mBaiduMap.setOnMarkerClickListener(markClick);
                                        // 定义地图状态
                                        updateStatus(points.get(i), 5);
//                                       setPoint((new LatLng(Double.parseDouble(ltrackModel.get(i).getLat()), Double.parseDouble(ltrackModel.get(i).getLng()))), ltrackModel.get(i).getTime(), "车次：" + checi, 1);
                                }
                            }
                        }
                    }
                    //获取统计信息（首页）
                    if (msg.arg1 == RequestCode.GETSTATICTICSINFO){
                        statisticsInfoModel = JSONObject.parseObject(msg.obj.toString(), StatisticsInfoModel.class);
                    }
                    //获取故障（告警）列表统计数据
                    if (msg.arg1 == RequestCode.GETTOUBLESNUM){
                        mMsgNum.setVisibility(View.VISIBLE);
                        JSONObject ob = JSONObject.parseObject(msg.obj.toString());
                        String number = ob.getString("number");
                        if (number.equals("0")){
                            isReadMsg = false;
                            mMsgNum.setVisibility(View.GONE);
                        }else{
                            isReadMsg = true;
                            mMsgNum.setText(number);
                        }

                    }
                    //获取单车故障统计数据（首页底部）
                    if (msg.arg1 == RequestCode.GETWARMNUMS){
                        warmModel = JSONObject.parseObject(msg.obj.toString(), WarmNumsModel.class);
                    }
                    break;
                case HttpUtil.EMPTY:
                    //获取故障（告警）列表
                    if (msg.arg1 == RequestCode.GETTROUBLES){
//                        main_gaojing.setImageResource(R.drawable.qz_14);
//                        isGifImg = false;
                    }
                    //获取统计信息（首页）
                    if (msg.arg1 == RequestCode.GETSTATICTICSINFO){
                        statisticsInfoModel = null;
                    }
                    //获取故障（告警）列表统计数据
                    if (msg.arg1 == RequestCode.GETTOUBLESNUM){
                        isReadMsg = false;
                        mMsgNum.setVisibility(View.GONE);
                    }
                    //获取单车故障统计数据（首页底部）
                    if (msg.arg1 == RequestCode.GETWARMNUMS){
                        warmModel = null;
                    }
                    break;
                case HttpUtil.FAILURE:
                    ToastUtil.showBottomLong(mContext,RequestCode.ERRORINFO);
                    break;
                case HttpUtil.LOADING:
                    break;
                default:
                    break;
            }
        }
    };

    private void init(){
        if (MyApplication.loginModel.getType().equals("1")||MyApplication.loginModel.getType().equals("4")){
            mBottomTitle.setText("统计");
        }else{
            mBottomTitle.setText("告警");
        }
        mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED); // 关闭手势滑动
        mDrawerLayout.setFocusableInTouchMode(false);//可以点击返回键
        train_menu.setOnClickListener(this);
        train_tongji.setOnClickListener(this);
        main_gaojing.setOnClickListener(this);
        mMenuBottom.setOnClickListener(this);
        getLeftListView();
        // 隐藏缩放控件
        hidezoomView();
        mBaiduMap = mMapView.getMap();
        //注册广播
        jPushReceiver=new MessageReceiver();
		IntentFilter filter = new IntentFilter();
		filter.setPriority(IntentFilter.SYSTEM_HIGH_PRIORITY);
		filter.addAction(MESSAGE_RECEIVED_ACTION);
		registerReceiver(jPushReceiver, filter);

    }

    /**
     * 获取网络数据
     */
    private void getNetData(){
        if (MyApplication.getNetObject().isNetConnected()) {
            progressDialog = RoundProgressDialog.createDialog(this);
            if (progressDialog != null && !progressDialog.isShowing()) {
                progressDialog.setMessage("加载中...");
                progressDialog.show();
            }
            getTroubles(troubleLevel,"1",MyApplication.loginModel.getUserID());
            getTrainInfo();
            getTroublesNum();
            if (MyApplication.loginModel.getType().equals("2")||MyApplication.loginModel.getType().equals("3")){
                getWarmNum();
            }else{
                getStatisticsInfo();
            }
        } else {
            ToastUtil.showBottomShort(this, RequestCode.NOLOGIN);
        }
    }

    /**
     * 获取故障（告警）列表
     */
    private void getTroubles(String troubleLevel,String page,String userID){
        http.sendGet(RequestCode.GETTROUBLES, WebUrlConfig.getTroubles("","",troubleLevel,"","",page,userID));
    }

    /**
     * 查询列车运行状态
     */
    private void getTrainInfo(){
        http.sendGet(RequestCode.GETTRAININFO, WebUrlConfig.getTrainInfo());
    }

    /**
     * 获取统计信息（首页）
     */
    private void getStatisticsInfo(){
        http.sendGet(RequestCode.GETSTATICTICSINFO,WebUrlConfig.getStatisticsInfo());
    }

    /**
     * 获取故障（告警）列表统计数据
     */
    private void getTroublesNum(){
        http.sendGet(RequestCode.GETTOUBLESNUM,WebUrlConfig.getTroublesNum(MyApplication.loginModel.getUserID()));
    }

    /**
     * 获取单车故障统计数据（首页底部）
     */
    private void getWarmNum(){
        http.sendGet(RequestCode.GETWARMNUMS,WebUrlConfig.getWarmNums(MyApplication.loginModel.getUserID()));
    }

    /**
     * 初始化 左侧数据
     */
    private void getLeftListView(){
        MainDrawerLeftAdapter adapter = new MainDrawerLeftAdapter(mContext);
        mLeftLv.setAdapter(adapter);
        mLeftLv.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                mDrawerLayout.closeDrawers();
                Intent intent = new Intent();
                switch (position){
                    case 0://历史数据
                        if (ltrain.size()>0){
                            intent.setClass(MainActivity.this,DataCheckActivity.class);
                            intent.putExtra("trainsNum",getTrainNumberAll(ltrain));
                            intent.putExtra("trainsId",getTrainIdAll(ltrain));
                            startActivity(intent);
                        }
                        break;
                    case 1://历史告警
                        if (MyApplication.loginModel.getType().equals("1")||MyApplication.loginModel.getType().equals("4")){
                            intent.setClass(mContext,GaojingLeadActivity.class);
                        }else if(MyApplication.loginModel.getType().equals("2")){//乘务员
                            intent.setClass(mContext,GaojingTrainmanActivity.class);
                        }else if(MyApplication.loginModel.getType().equals("3")){//检修员
                            intent.setClass(mContext,GaojingRepairerActivity.class);
                        }
                        intent.putExtra("troubleLevel","");//等级
                        intent.putExtra("type",1);
                        startActivity(intent);
                        break;
                    case 2://数据统计
                        break;
                    case 3://设置
                        intent.setClass(mContext,SetActivity.class);
                        startActivity(intent);
                        break;
                    default:
                        break;
                }
            }
        });
    }

    @Override
    public void onClick(View v) {
        if (v == main_gaojing){//gif图片点击
            if(ltroubles.size()>0 || isWay){
                if (isGifImg){
                    Intent intent = new Intent();
                    if (MyApplication.loginModel.getType().equals("1")||MyApplication.loginModel.getType().equals("4")){
                        intent.setClass(mContext,GaojingLeadActivity.class);
                    }else if(MyApplication.loginModel.getType().equals("2")){//乘务员
                        intent.setClass(mContext,GaojingTrainmanActivity.class);
                    }else if(MyApplication.loginModel.getType().equals("3")){//检修员
                        intent.setClass(mContext,GaojingRepairerActivity.class);
                    }
                    intent.putExtra("troubleLevel",troubleLevel);
                    intent.putExtra("type",2);
                    intent.putExtra("TroublesModel", JSON.toJSONString(ltroubles));
                    startActivity(intent);
                }
            }
        }
        if (v==train_menu){
            mDrawerLayout.openDrawer(Gravity.LEFT);
        }
        if (v==train_tongji){
//            mDrawerLayout.openDrawer(Gravity.RIGHT);
            if(isReadMsg){
                Intent intent = new Intent();
                if (MyApplication.loginModel.getType().equals("1")||MyApplication.loginModel.getType().equals("4")){
                    intent.setClass(mContext,GaojingLeadActivity.class);
                }else if(MyApplication.loginModel.getType().equals("2")){//乘务员
                    intent.setClass(mContext,GaojingTrainmanActivity.class);
                }else if(MyApplication.loginModel.getType().equals("3")){//检修员
                    intent.setClass(mContext,GaojingRepairerActivity.class);
                }
                intent.putExtra("troubleLevel",troubleLevel);
                intent.putExtra("type",2);
                intent.putExtra("TroublesModel", JSON.toJSONString(ltroubles));
                startActivity(intent);
            }
        }
        if (v == mMenuBottom){
            if (statisticsInfoModel!=null || warmModel !=null){
                mMenuBottom.setVisibility(View.GONE);
                Intent intent = new Intent(mContext,MainBottomActivity.class);
                intent.putExtra("StatisticsInfoModel",statisticsInfoModel);
                intent.putExtra("WarmNumsModel",warmModel);
                startActivity(intent);
                overridePendingTransition(R.anim.main_entry,R.anim.main_exit);
            }else{
                ToastUtil.showBottomLong(mContext,"暂无数据");
            }
        }

    }

    /**
     * 隐藏图标
     */
    private void hidezoomView() {
        // 隐藏logo
        View child = mMapView.getChildAt(1);
        if (child != null && (child instanceof ImageView || child instanceof ZoomControls)){
            child.setVisibility(View.INVISIBLE);
        }
        //地图上比例尺
        mMapView.showScaleControl(false);
        // 隐藏缩放控件
        mMapView.showZoomControls(false);
//        final int count = mMapView.getChildCount();
//        for (int i = 0; i < count; i++) {
//            View child = mMapView.getChildAt(i);
//            if (child instanceof ZoomControls) {
//                child.setVisibility(View.INVISIBLE);
//            }
//        }
    }


    /**
     * 自定义点标记
     *
     * @param point
     * @param adress
     * @param time
     * @param type  0默认点，1带点击事件
     */
    public void setPoint(LatLng point, String adress, String time, int type,String img,final int i) {
//        mBaiduMap.clear();
        // 创建InfoWindow展示的自定义view,显示详情对话框
        TextView button = setPop(adress);

        // 构建Marker图标
        BitmapDescriptor bitmap = BitmapDescriptorFactory.fromAssetWithDpi(img);

        // 构建MarkerOption，用于在地图上添加Marker
        OverlayOptions option = new MarkerOptions().position(point)
                .icon(bitmap).zIndex(3);
        View contentView = getLayoutInflater().inflate(R.layout.mapmark_layout,
                null);
        TextView location_time = (TextView) contentView
                .findViewById(R.id.location_time);
        TextView location_address = (TextView) contentView
                .findViewById(R.id.location_address);

        location_address.setText(adress);
        contentView.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                mBaiduMap.hideInfoWindow();
            }
        });
        // 构建对话框用于显示
        // 创建InfoWindow , 传入 view， 地理坐标， y 轴偏移量
        final InfoWindow mInfoWindow = new InfoWindow(contentView, point, -20);

        markClick = new BaiduMap.OnMarkerClickListener() {

            @Override
            public boolean onMarkerClick(Marker arg0) {
//                mBaiduMap.showInfoWindow(mInfoWindow);
                Log.i("TAG","getTrainID"+ltrain.get(i).getTrainID());
                return false;
            }
        };
        if (type == 1) {
            location_time.setText(time);
//             显示InfoWindow
//            mBaiduMap.showInfoWindow(mInfoWindow);
            mBaiduMap.setOnMarkerClickListener(markClick);
        }
        // 在地图上添加Marker，并显示
        mBaiduMap.addOverlay(option);
        // 正常显示
        mBaiduMap.setMapType(BaiduMap.MAP_TYPE_NORMAL);

        if (type==1){
            // 定义地图状态
            updateStatus(point, 5);
        }else {
            // 定义地图状态
            updateStatus(point, 5);
        }

    }

    /**
     * 自定义地图对话框，展示详情
     *
     * @param adress
     * @return
     */
    private TextView setPop(String adress) {
        TextView button = new TextView(getApplicationContext());
        button.setBackgroundColor(getResources().getColor(R.color.white));
        button.setTextSize(14);
        button.setTextColor(getResources().getColor(R.color.black));
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(
                200, LinearLayout.LayoutParams.MATCH_PARENT);
        button.setText(adress);
        layoutParams.setMargins(50, 0, 50, 0);
        button.setLayoutParams(layoutParams);

        return button;
    }

    /**
     * update地图的状态与变化
     *
     * @param point
     * @param zoom
     */
    private void updateStatus(LatLng point, int zoom) {
        MapStatus mMapStatus = new MapStatus.Builder().target(point).zoom(zoom)
                .build();
        // 定义MapStatusUpdate对象，以便描述地图状态将要发生的变化
        MapStatusUpdate mMapStatusUpdate =

                MapStatusUpdateFactory.newMapStatus(mMapStatus);
        // 改变地图状态
        mBaiduMap.setMapStatus(mMapStatusUpdate);
    }

    /**
     * 得到所有的车次
     * @param list
     * @return
     */
    private String[] getTrainNumberAll(List<TrainModel> list){
        String[] num = new String[list.size()];
        for (int i=0;i<list.size();i++){
            num[i] = list.get(i).getTrainNumber();
        }
        return num;
    }

    /**
     * 得到所有的车次id 与上面对应
     * @param list
     * @return
     */
    private String[] getTrainIdAll(List<TrainModel> list){
        String[] id = new String[list.size()];
        for (int i=0;i<list.size();i++){
            id[i] = list.get(i).getTrainID();
        }
        return id;
    }


    /**
     *	退出activity
     */
    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK
                && event.getAction() == KeyEvent.ACTION_DOWN) {

            if ((System.currentTimeMillis() - exitTime) > 2000) {
                Toast.makeText(this, "再按一次退出程序!",
                        Toast.LENGTH_SHORT).show();
                exitTime = System.currentTimeMillis();
            } else {
                //退出所有的activity
                Intent intent = new Intent();
                intent.setAction(BaseActivity.TAG_ESC_ACTIVITY);
                sendBroadcast(intent);
//                System.exit(0);
                finish();
            }
            return true;
        }
        return super.onKeyDown(keyCode, event);
    }

    /**
     *
     * com.sitemap.na2ne.activities.MessageReceiver
     * @author zhang
     * 推送消息接收器
     * create at 2016年3月10日 下午5:07:17
     */
	public class MessageReceiver extends BroadcastReceiver {

		@Override
		public void onReceive(Context context, Intent intent) {
			if (MESSAGE_RECEIVED_ACTION.equals(intent.getAction())) {
                if(!isGifImg){
//                    HttpImageUtil.loadImageGif(main_gaojing,"assets://bjd.gif");
//                    isGifImg = true;
//                    isWay = true;
                }
			}
		}
	}

}
